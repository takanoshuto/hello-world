---
# Feel free to add content and custom Front Matter to this file.
# To modify the layout, see https://jekyllrb.com/docs/themes/#overriding-theme-defaults

layout: home
title: software Eng. lecture note
paprmalink: /docs/softwareEng2025
---

# ソフトウェア工学 2025

## ソフトウェア
### ソフトウェアの定義
1.実行されることによって必要な特性，機能，性能を提供する命令語群  
2.プログラムが適切に情報を扱うことを可能とするデータ構造  
3.プログラムの操作や使用法を記述した情報  
### ソフトウェアの特徴
・新しい環境や技術のニーズを満たすよう適応しなければならない  
・新しいビジネス要求を実現するために強化されなければならない  
・より近代的なシステムやデータベースと相互作用するために拡張されなければならない  
・進化し続ける環境で実行可能となるよう，再構築されなければならない  

## ソフトウェア工学
### ソフトウェア工学の定義
ソフトウェアの開発，運用，メンテナンスに対するシステマティックで規律ある，定量化できるアプローチの適用，すなわちソフトウェアに対するエンジニアリングの適用  
### ソフトウェア工学の必要性
1.大規模化と複雑さ  
ソフトウェアなしでは社会が回らないため，ソフトウェアを効率よくよく開発し，メンテナンスする必要がある．効率と品質の両立が求められる．  
2.IT人材の不足  
ソフト絵和の需要に足してIT人材が追いついていない．また，ソフトウェアを効率的に開発・管理することのできる人材が少ない．  
3.社会性と求められるミッション  
ライフライン・インフラとしてのソフトウェアが増加．不測の事態に対応した事業・サービスが求められる．  
4.不確実性の増大  
ソフトウェア利用が検索型から交流型へ変化．意図しないソフトウェア活用などの多様化．  

## ソフトウェアライフサイクル
### 要件定義
要件定義書を作成し，実現する機能，実現しない機能を明確にする．プロジェクト関係者のバイブル，社内外への宣言と協力依頼，RFPなどのために行う．
### 設計
設計書を作成し，コーディングできるレベルの仕様書に落とし込む．
### 制作
設計書に従ってシステムを構築する．自社開発したり，外部委託したりして行う．
### テストとデバック
テストを行い，バグの早期発見・対処を目指す．
### 運用・保守
稼働後のシステムを継続的に運用する．保守のためにはソフトウェア以外の要因も考慮する必要がある．

## プロジェクト
必ず終わりがある有用性を持ち，独自の目的を達成する独自性を持つ仕事．プロジェクト業務はバッグキャスティングで行う．

## ソフトウェア分析
ソフトウェアを見える化するための手法
### ソフトウェアの評価
1.コードの物量（ステップ数）  
ソースコード行数などで測る．複数言語が入り混じっている場合は換算する必要がある．  
2.コードの物量（オブジェクト容量）  
ソースコードの容量などで測る．組み込み型ソフトウェアはサイズが小さいほどよい．  
3.ファンクションポイント法  
プログラミングフェーズに入る前にユーザー要件が定まり，必要な機能が見えてきた段階でシステム規模を概算することができる．システムへの投資意思決定の指標にも利用できる．  
4.使い勝手  
画面の視認性，操作性，入力補助，互換性，ガイダンスなど．  

## 開発プロセス
### ウォーターフォール型開発プロセス
要件定義からの一連の流れを順番に行っていく．進捗管理が容易であり，成果物が明確である．後工程にしわ寄せが集中するリスクがある．
### スパイラルモデル
プログラム開発を小さなフェーズに分割し，フェーズごとにプロトタイプによるデモンストレーションとフィードバックを行う．プロトタイプ作成に想定外の作業が発生するリスクがある．
### 反復型開発プロセス
ソフトウェアを機能分割し，反復という単位で管理する．部分的に完成させていくので顧客の要求を取り入れやすく，部分的な納品が可能であるというメリットがある．一方，分割のための作業や管理業務が増えたり，全体像が見えづらいといったデメリットもある．
### アジャイルプロセス
変化に対応して無駄を廃した最適な手法で動くソフトウェアの提供を優先し，「できるだけ決定を遅らせる」「できるだけ早く提供する」を実現．エンジニアの寛容さを考慮し，モチベーションを上げて学習効果を高めることで無駄をなくす．個人個人の相互作用や顧客とのコラボレーション，変化への対応を重要視する．

## WBS(Work Breakdown Structure)
プロジェクト目標を達成し，必要な成果物を生成するために，プロジェクトチームが実行する作業を，要素成果物を主体に階層的に要素分解したもの
### メリット
・スコープが明確になる  
・やるべき作業が明確になる  
・全体管理と作業計画が明確化される  
・プロジェクト実施時はWBSに則って実行すればよくなる
### 作り方
・スコープを明確にする  
トップダウンアプローチ，バックキャスティング．  
・大きな作業をグルーピングする  
データ収集やデータ分析，可視化などにグルーピングする．  
・グルーピングした作業の相互関連を考える  
データ収集をした後で分析をするなどの関連を考える．  
・各グループの作業を洗い出す  
もれなくダブりなく作業を明確にしていく．

## コーディング
・1行の長さ  
行を継続する場合は，折り返された要素を盾にそろえる．  
・レイアウト  
1レベルインデントするごとに，スペースを4つ使う．  
・スペース  
演算子の前後にスペースをひとつづつ開ける．無駄なスペースを入れない．  
・改行  
文を重ねない．演算子の位置を揃える．  
・import  
標準ライブラリ，サードパーティに関連するもの，ローカルなアプリケーション/ライブラリに特有のものの順にimportを書く．  
・コメント  
コードを変更したときはコメントも変更する．明解かつ分かりやすいコメントを書く．コメントは基本的に英語で書く．  
・命名規則  
パッケージとモジュールはすべて小文字の短い名前．モジュールはアンダースコアで区切ってもよい．クラスはCapWords方式．関数と変数は小文字のみ．定数は大文字のみ，単語をアンダースコアで区切る．1文字変数にl，o，Iは使わない．

## バージョン管理
ファイルをだれがいつどのように変更したかを管理する．これらの情報が管理されていいれば，多数のメンバーとも共同でコード開発ができる．集中管理型や分散管理型がある．
### git
分散管理型のバージョン管理システムである．変更経歴が残り，変更した箇所に戻ることができる．他人と共同編集することができる．



[softwareEng Lecture Notes](softwareEng2025.md)